0 read(unsigned int fd, char __user * buf, size_t count)
1 write(unsigned int fd, const char __user * buf, size_t count)
2 open(const char __user * filename, int flags, umode_t mode)
3 close(unsigned int fd)
4 stat(const char __user * filename, struct stat __user * statbuf)
5 fstat(const char __user * filename, struct stat __user * statbuf)
6 lstat(const char __user * filename, struct stat __user * statbuf)
7 poll(struct pollfd __user * ufds, unsigned int nfds, int timeout_msecs)
8 lseek(unsigned int fd, off_t offset, unsigned int whence)
9 mmap(unsigned long addr, unsigned long len, unsigned long prot, unsigned long flags, unsigned long fd, unsigned long off)
10 mprotect(unsigned long start, size_t len, unsigned long prot)
11 munmap(unsigned long addr, size_t len)
12 brk(unsigned long brk)
13 rt_sigaction(int sig, const struct sigaction __user * act, struct sigaction __user * oact, size_t sigsetsize)
14 rt_sigprocmask(int how, sigset_t __user * nset, sigset_t __user * oset, size_t sigsetsize)
15 rt_sigreturn
16 ioctl(unsigned int fd, unsigned int cmd, unsigned long arg)
17 pread64(unsigned int fd, char __user * buf, size_t count, loff_t pos)
18 pwrite64(unsigned int fd, const char __user * buf, size_t count, loff_t pos)
19 readv(unsigned long fd, const struct iovec __user * vec, unsigned long vlen)
20 writev(unsigned long fd, const struct iovec __user * vec, unsigned long vlen)
21 access(const char __user * filename, int mode)
22 pipe(int __user * fildes)
23 select(int n, fd_set __user * inp, fd_set __user * outp, fd_set __user * exp, struct timeval __user * tvp)
24 sched_yield()
25 mremap(unsigned long addr, unsigned long old_len, unsigned long new_len, unsigned long flags, unsigned long new_addr)
26 msync(unsigned long start, size_t len, int flags)
27 mincore(unsigned long start, size_t len, unsigned char __user * vec)
28 madvise(unsigned long start, size_t len_in, int behavior)
29 shmget(key_t key, size_t size, int shmflg)
30 shmat(int shmid, char __user * shmaddr, int shmflg)
31 shmctl(int shmid, int cmd, struct shmid_ds __user * buf)
32 dup(unsigned int fildes)
33 dup2(unsigned int oldfd, unsigned int newfd)
34 pause()
35 nanosleep(struct timespec __user * rqtp, struct timespec __user * rmtp)
36 getitimer(int which, struct itimerval __user * value)
37 alarm(unsigned int seconds)
38 setitimer(int which, struct itimerval __user * value, struct itimerval __user * ovalue)
39 getpid()
40 sendfile(int out_fd, int in_fd, off_t __user * offset, size_t count)
41 socket(int family, int type, int protocol)
42 connect(int fd, struct sockaddr __user * uservaddr, int addrlen)
43 accept(int fd, struct sockaddr __user * upeer_sockaddr, int __user * upeer_addrlen)
44 sendto(int fd, void __user * buff, size_t len, unsigned int flags, struct sockaddr __user * addr, int addr_len)
45 recvfrom(int fd, void __user * ubuf, size_t size, unsigned int flags, struct sockaddr __user * addr, int __user * addr_len)
46 sendmsg(int fd, struct user_msghdr __user * msg, unsigned int flags)
47 recvmsg(int fd, struct user_msghdr __user * msg, unsigned int flags)
48 shutdown(int fd, int how)
49 bind(int fd, struct sockaddr __user * umyaddr, int addrlen)
50 listen(int fd, int backlog)
51 getsockname(int fd, struct sockaddr __user * usockaddr, int __user * usockaddr_len)
52 getpeername(int fd, struct sockaddr __user * usockaddr, int __user * usockaddr_len)
53 socketpair(int family, int type, int protocol, int __user * usockvec)
54 setsockopt(int fd, int level, int optname, char __user * optval, int optlen)
55 getsockopt(int fd, int level, int optname, char __user * optval, int __user * optlen)
56 clone(unsigned long clone_flags, unsigned long newsp, int __user * parent_tidptr, int __user * child_tidptr, unsigned long tls)
57 fork()
58 vfork()
59 execve(const char __user * filename, const char __user *const __user * argv, const char __user *const __user * envp)
60 exit(int error_code)
61 wait4(pid_t upid, int __user * stat_addr, int options, struct rusage __user * ru)
62 kill(pid_t pid, int sig)
63 uname(struct old_utsname __user * name)
64 semget(key_t key, int nsems, int semflg)
65 semop(int semid, struct sembuf __user * tsops, unsigned nsops)
66 semctl(int semid, int semnum, int cmd, unsigned long arg)
67 shmdt(char __user * shmaddr)
68 msgget(key_t key, int msgflg)
69 msgsnd(int msqid, struct msgbuf __user * msgp, size_t msgsz, int msgflg)
70 msgrcv(int msqid, struct msgbuf __user * msgp, size_t msgsz, long msgtyp, int msgflg)
71 msgctl(int msqid, int cmd, struct msqid_ds __user * buf)
72 fcntl(unsigned int fd, unsigned int cmd, unsigned long arg)
73 flock(unsigned int fd, unsigned int cmd)
74 fsync(unsigned int fd)
75 fdatasync(unsigned int fd)
76 truncate(const char __user * path, long length)
77 ftruncate(unsigned int fd, unsigned long length)
78 getdents(unsigned int fd, struct linux_dirent __user * dirent, unsigned int count)
79 getcwd(char __user * buf, unsigned long size)
80 chdir(const char __user * filename)
81 fchdir(unsigned int fd)
82 rename(const char __user * oldname, const char __user * newname)
83 mkdir(const char __user * pathname, umode_t mode)
84 rmdir(const char __user * pathname)
85 creat(const char __user * pathname, umode_t mode)
86 link(const char __user * oldname, const char __user * newname)
87 unlink(const char __user * pathname)
88 symlink(const char __user * oldname, const char __user * newname)
89 readlink(const char __user * path, char __user * buf, int bufsiz)
90 chmod(const char __user * filename, umode_t mode)
91 fchmod(unsigned int fd, umode_t mode)
92 chown(const char __user * filename, uid_t user, gid_t group)
93 fchown(unsigned int fd, uid_t user, gid_t group)
94 lchown(const char __user * filename, uid_t user, gid_t group)
95 umask(int mask)
96 gettimeofday(struct timeval __user * tv, struct timezone __user * tz)
97 getrlimit(unsigned int resource, struct rlimit __user * rlim)
98 getrusage(int who, struct rusage __user * ru)
99 sysinfo(struct sysinfo __user * info)
100 times(struct tms __user * tbuf)
101 ptrace(long request, long pid, unsigned long addr, unsigned long data)
102 getuid()
103 syslog(int type, char __user * buf, int len)
104 getgid()
105 setuid(uid_t uid)
106 setgid(gid_t gid)
107 geteuid()
108 getegid()
109 setpgid(pid_t pid, pid_t pgid)
110 getppid()
111 getpgrp()
112 setsid()
113 setreuid(uid_t ruid, uid_t euid)
114 setregid(gid_t rgid, gid_t egid)
115 getgroups(int gidsetsize, gid_t __user * grouplist)
116 setgroups(int gidsetsize, gid_t __user * grouplist)
117 setresuid(uid_t ruid, uid_t euid, uid_t suid)
118 getresuid(uid_t __user * ruidp, uid_t __user * euidp, uid_t __user * suidp)
119 setresgid(gid_t rgid, gid_t egid, gid_t sgid)
120 getresgid(gid_t __user * rgidp, gid_t __user * egidp, gid_t __user * sgidp)
121 getpgid(pid_t pid)
122 setfsuid(uid_t uid)
123 setfsgid(gid_t gid)
124 getsid(pid_t pid)
125 capget(cap_user_header_t header, cap_user_data_t dataptr)
126 capset(cap_user_header_t header, const cap_user_data_t data)
127 rt_sigpending(sigset_t __user * uset, size_t sigsetsize)
128 rt_sigtimedwait(const sigset_t __user * uthese, siginfo_t __user * uinfo, const struct timespec __user * uts, size_t sigsetsize)
129 rt_sigqueueinfo(pid_t pid, int sig, siginfo_t __user * uinfo)
130 rt_sigsuspend(sigset_t __user * unewset, size_t sigsetsize)
131 sigaltstack(const stack_t __user * uss, stack_t __user * uoss)
132 utime(char __user * filename, struct utimbuf __user * times)
133 mknod(const char __user * filename, umode_t mode, unsigned dev)
134 uselib(const char __user * library)
135 personality(unsigned int personality)
136 ustat(unsigned dev, struct ustat __user * ubuf)
137 statfs(const char __user * pathname, struct statfs __user * buf)
138 fstatfs(unsigned int fd, struct statfs __user * buf)
139 sysfs(int option, unsigned long arg1, unsigned long arg2)
140 getpriority(int which, int who)
141 setpriority(int which, int who, int niceval)
142 sched_setparam(pid_t pid, struct sched_param __user * param)
143 sched_getparam(pid_t pid, struct sched_param __user * param)
144 sched_setscheduler(pid_t pid, int policy, struct sched_param __user * param)
145 sched_getscheduler(pid_t pid)
146 sched_get_priority_max(int policy)
147 sched_get_priority_min(int policy)
148 sched_rr_get_interval(pid_t pid, struct timespec __user * interval)
149 mlock(unsigned long start, size_t len)
150 munlock(unsigned long start, size_t len)
151 mlockall(int flags)
152 munlockall()
153 vhangup()
154 modify_ldt
155 pivot_root(const char __user * new_root, const char __user * put_old)
156 _sysctl(struct __sysctl_args __user * args)
157 prctl(int option, unsigned long arg2, unsigned long arg3, unsigned long arg4, unsigned long arg5)
158 arch_prctl
159 adjtimex(struct timex __user * txc_p)
160 setrlimit(unsigned int resource, struct rlimit __user * rlim)
161 chroot(const char __user * filename)
162 sync()
163 acct(const char __user * name)
164 settimeofday(struct timeval __user * tv, struct timezone __user * tz)
165 mount(char __user * dev_name, char __user * dir_name, char __user * type, unsigned long flags, void __user * data)
166 umount2(char __user * name, int flags)
167 swapon(const char __user * specialfile, int swap_flags)
168 swapoff(const char __user * specialfile)
169 reboot(int magic1, int magic2, unsigned int cmd, void __user * arg)
170 sethostname(char __user * name, int len)
171 setdomainname(char __user * name, int len)
172 iopl(unsigned int level)
173 ioperm
174 create_module
175 init_module(void __user * umod, unsigned long len, const char __user * uargs)
176 delete_module(const char __user * name_user, unsigned int flags)
177 get_kernel_syms
178 query_module
179 quotactl(unsigned int cmd, const char __user * special, qid_t id, void __user * addr)
180 nfsservctl
181 getpmsg
182 putpmsg
183 afs_syscall
184 tuxcall
185 security
186 gettid()
187 readahead(int fd, loff_t offset, size_t count)
188 setxattr(const char __user * pathname, const char __user * name, const void __user * value, size_t size, int flags)
189 lsetxattr(const char __user * pathname, const char __user * name, const void __user * value, size_t size, int flags)
190 fsetxattr(int fd, const char __user * name, const void __user * value, size_t size, int flags)
191 getxattr(const char __user * pathname, const char __user * name, void __user * value, size_t size)
192 lgetxattr(const char __user * pathname, const char __user * name, void __user * value, size_t size)
193 fgetxattr(int fd, const char __user * name, void __user * value, size_t size)
194 listxattr(const char __user * pathname, char __user * list, size_t size)
195 llistxattr(const char __user * pathname, char __user * list, size_t size)
196 flistxattr(int fd, char __user * list, size_t size)
197 removexattr(const char __user * pathname, const char __user * name)
198 lremovexattr(const char __user * pathname, const char __user * name)
199 fremovexattr(int fd, const char __user * name)
200 tkill(pid_t pid, int sig)
201 time(time_t __user * tloc)
202 futex(u32 __user * uaddr, int op, u32 val, struct timespec __user * utime, u32 __user * uaddr2, u32 val3)
203 sched_setaffinity(pid_t pid, unsigned int len, unsigned long __user * user_mask_ptr)
204 sched_getaffinity(pid_t pid, unsigned int len, unsigned long __user * user_mask_ptr)
205 set_thread_area(struct user_desc __user * user_desc)
206 io_setup(unsigned nr_events, aio_context_t __user * ctxp)
207 io_destroy(aio_context_t ctx)
208 io_getevents(aio_context_t ctx_id, long min_nr, long nr, struct io_event __user * events, struct timespec __user * timeout)
209 io_submit(aio_context_t ctx_id, long nr, struct iocb __user * __user * iocbpp)
210 io_cancel(aio_context_t ctx_id, struct iocb __user * iocb, struct io_event __user * result)
211 get_thread_area(struct user_desc __user * user_desc)
212 lookup_dcookie(u64 cookie64, char __user * buf, size_t len)
213 epoll_create(int size)
214 epoll_ctl_old
215 epoll_wait_old
216 remap_file_pages(unsigned long start, unsigned long size, unsigned long prot, unsigned long pgoff, unsigned long flags)
217 getdents64(unsigned int fd, struct linux_dirent64 __user * dirent, unsigned int count)
218 set_tid_address(int __user * tidptr)
220 semtimedop(int semid, struct sembuf __user * tsops, unsigned nsops, const struct timespec __user * timeout)
221 fadvise64(int fd, loff_t offset, size_t len, int advice)
222 timer_create(const clockid_t which_clock, struct sigevent __user * timer_event_spec, timer_t __user * created_timer_id)
223 timer_settime(timer_t timer_id, int flags, const struct itimerspec __user * new_setting, struct itimerspec __user * old_setting)
224 timer_gettime(timer_t timer_id, struct itimerspec __user * setting)
225 timer_getoverrun(timer_t timer_id)
226 timer_delete(timer_t timer_id)
227 clock_settime(const clockid_t which_clock, const struct timespec __user * tp)
228 clock_gettime(const clockid_t which_clock, struct timespec __user * tp)
229 clock_getres(const clockid_t which_clock, struct timespec __user * tp)
230 clock_nanosleep(const clockid_t which_clock, int flags, const struct timespec __user * rqtp, struct timespec __user * rmtp)
231 exit_group(int error_code)
232 epoll_wait(int epfd, struct epoll_event __user * events, int maxevents, int timeout)
233 epoll_ctl(int epfd, int op, int fd, struct epoll_event __user * event)
234 tgkill(pid_t tgid, pid_t pid, int sig)
235 utimes(char __user * filename, struct timeval __user * utimes)
236 vserver
237 mbind(unsigned long start, unsigned long len, unsigned long mode, const unsigned long __user * nmask, unsigned long maxnode, unsigned flags)
238 set_mempolicy(int mode, const unsigned long __user * nmask, unsigned long maxnode)
239 get_mempolicy(int __user * policy, unsigned long __user * nmask, unsigned long maxnode, unsigned long addr, unsigned long flags)
240 mq_open(const char __user * u_name, int oflag, umode_t mode, struct mq_attr __user * u_attr)
241 mq_unlink(const char __user * u_name)
242 mq_timedsend(mqd_t mqdes, const char __user * u_msg_ptr, size_t msg_len, unsigned int msg_prio, const struct timespec __user * u_abs_timeout)
243 mq_timedreceive(mqd_t mqdes, char __user * u_msg_ptr, size_t msg_len, unsigned int __user * u_msg_prio, const struct timespec __user * u_abs_timeout)
244 mq_notify(mqd_t mqdes, const struct sigevent __user * u_notification)
245 mq_getsetattr(mqd_t mqdes, const struct mq_attr __user * u_mqstat, struct mq_attr __user * u_omqstat)
246 kexec_load(unsigned long entry, unsigned long nr_segments, struct kexec_segment __user * segments, unsigned long flags)
247 waitid(int which, pid_t upid, struct siginfo __user * infop, int options, struct rusage __user * ru)
248 add_key(const char __user * _type, const char __user * _description, const void __user * _payload, size_t plen, key_serial_t ringid)
249 request_key(const char __user * _type, const char __user * _description, const char __user * _callout_info, key_serial_t destringid)
250 keyctl(int option, unsigned long arg2, unsigned long arg3, unsigned long arg4, unsigned long arg5)
251 ioprio_set(int which, int who, int ioprio)
252 ioprio_get(int which, int who)
253 inotify_init()
254 inotify_add_watch(int fd, const char __user * pathname, u32 mask)
255 inotify_rm_watch(int fd, __s32 wd)
256 migrate_pages(pid_t pid, unsigned long maxnode, const unsigned long __user * old_nodes, const unsigned long __user * new_nodes)
257 openat(int dfd, const char __user * filename, int flags, umode_t mode)
258 mkdirat(int dfd, const char __user * pathname, umode_t mode)
259 mknodat(int dfd, const char __user * filename, umode_t mode, unsigned dev)
260 fchownat(int dfd, const char __user * filename, uid_t user, gid_t group, int flag)
261 futimesat(int dfd, const char __user * filename, struct timeval __user * utimes)
262 newfstatat(int dfd, const char __user * filename, struct stat __user * statbuf, int flag)
263 unlinkat(int dfd, const char __user * pathname, int flag)
264 renameat(int olddfd, const char __user * oldname, int newdfd, const char __user * newname)
265 linkat(int olddfd, const char __user * oldname, int newdfd, const char __user * newname, int flags)
266 symlinkat(const char __user * oldname, int newdfd, const char __user * newname)
267 readlinkat(int dfd, const char __user * pathname, char __user * buf, int bufsiz)
268 fchmodat(int dfd, const char __user * filename, umode_t mode)
269 faccessat(int dfd, const char __user * filename, int mode)
270 pselect6(int n, fd_set __user * inp, fd_set __user * outp, fd_set __user * exp, struct timespec __user * tsp, void __user * sig)
271 ppoll(struct pollfd __user * ufds, unsigned int nfds, struct timespec __user * tsp, const sigset_t __user * sigmask, size_t sigsetsize)
272 unshare(unsigned long unshare_flags)
273 set_robust_list(struct robust_list_head __user * head, size_t len)
274 get_robust_list(int pid, struct robust_list_head __user * __user * head_ptr, size_t __user * len_ptr)
275 splice(int fd_in, loff_t __user * off_in, int fd_out, loff_t __user * off_out, size_t len, unsigned int flags)
276 tee(int fdin, int fdout, size_t len, unsigned int flags)
277 sync_file_range(int fd, loff_t offset, loff_t nbytes, unsigned int flags)
278 vmsplice(int fd, const struct iovec __user * iov, unsigned long nr_segs, unsigned int flags)
279 move_pages(pid_t pid, unsigned long nr_pages, const void __user * __user * pages, const int __user * nodes, int __user * status, int flags)
280 utimensat(int dfd, const char __user * filename, struct timespec __user * utimes, int flags)
281 epoll_pwait(int epfd, struct epoll_event __user * events, int maxevents, int timeout, const sigset_t __user * sigmask, size_t sigsetsize)
282 signalfd(int ufd, sigset_t __user * user_mask, size_t sizemask)
283 timerfd_create(int clockid, int flags)
284 eventfd(unsigned int count)
285 fallocate(int fd, int mode, loff_t offset, loff_t len)
286 timerfd_settime(int ufd, int flags, const struct itimerspec __user * utmr, struct itimerspec __user * otmr)
287 timerfd_gettime(int ufd, struct itimerspec __user * otmr)
288 accept4(int fd, struct sockaddr __user * upeer_sockaddr, int __user * upeer_addrlen, int flags)
289 signalfd4(int ufd, sigset_t __user * user_mask, size_t sizemask, int flags)
290 eventfd2(unsigned int count, int flags)
291 epoll_create1(int flags)
292 dup3(unsigned int oldfd, unsigned int newfd, int flags)
293 pipe2(int __user * fildes, int flags)
294 inotify_init1(int flags)
295 preadv(unsigned long fd, const struct iovec __user * vec, unsigned long vlen, unsigned long pos_l, unsigned long pos_h)
296 pwritev(unsigned long fd, const struct iovec __user * vec, unsigned long vlen, unsigned long pos_l, unsigned long pos_h)
297 rt_tgsigqueueinfo(pid_t tgid, pid_t pid, int sig, siginfo_t __user * uinfo)
298 perf_event_open(struct perf_event_attr __user * attr_uptr, pid_t pid, int cpu, int group_fd, unsigned long flags)
299 recvmmsg(int fd, struct mmsghdr __user * mmsg, unsigned int vlen, unsigned int flags, struct timespec __user * timeout)
300 fanotify_init(unsigned int flags, unsigned int event_f_flags)
301 fanotify_mark(int fanotify_fd, unsigned int flags, __u64 mask, int dfd, const char  __user * pathname)
302 prlimit64(pid_t pid, unsigned int resource, const struct rlimit64 __user * new_rlim, struct rlimit64 __user * old_rlim)
303 name_to_handle_at(int dfd, const char __user * name, struct file_handle __user * handle, int __user * mnt_id, int flag)
304 open_by_handle_at(int mountdirfd, struct file_handle __user * handle, int flags)
305 clock_adjtime(const clockid_t which_clock, struct timex __user * utx)
306 syncfs(int fd)
307 sendmmsg(int fd, struct mmsghdr __user * mmsg, unsigned int vlen, unsigned int flags)
308 setns(int fd, int nstype)
309 getcpu(unsigned __user * cpup, unsigned __user * nodep, struct getcpu_cache __user * unused)
310 process_vm_readv(pid_t pid, const struct iovec __user * lvec, unsigned long liovcnt, const struct iovec __user * rvec, unsigned long riovcnt, unsigned long flags)
311 process_vm_writev(pid_t pid, const struct iovec __user * lvec, unsigned long liovcnt, const struct iovec __user * rvec, unsigned long riovcnt, unsigned long flags)
312 kcmp(pid_t pid1, pid_t pid2, int type, unsigned long idx1, unsigned long idx2)
313 finit_module(int fd, const char __user * uargs, int flags)
314 sched_setattr(pid_t pid, struct sched_attr __user * uattr, unsigned int flags)
315 sched_getattr(pid_t pid, struct sched_attr __user * uattr, unsigned int size, unsigned int flags)
316 renameat2(int olddfd, const char __user * oldname, int newdfd, const char __user * newname, unsigned int flags)
317 seccomp(unsigned int op, unsigned int flags, const char __user * uargs)
318 getrandom
319 memfd_create(const char __user * uname, unsigned int flags)
320 kexec_file_load(int kernel_fd, int initrd_fd, unsigned long cmdline_len, const char __user * cmdline_ptr, unsigned long flags)
321 bpf(int cmd, union bpf_attr __user * uattr, unsigned int size)
322 execveat(int fd, const char __user * filename, const char __user *const __user * argv, const char __user *const __user * envp, int flags)
323 userfaultfd(int flags)
324 membarrier(int cmd, int flags)
325 mlock2(unsigned long start, size_t len, int flags)
