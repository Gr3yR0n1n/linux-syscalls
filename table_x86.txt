1 exit(int error_code)
2 fork()
3 read(unsigned int fd, char __user * buf, size_t count)
4 write(unsigned int fd, const char __user * buf, size_t count)
5 open(const char __user * filename, int flags, umode_t mode)
6 close(unsigned int fd)
7 waitpid(pid_t pid, int __user * stat_addr, int options)
8 creat(const char __user * pathname, umode_t mode)
9 link(const char __user * oldname, const char __user * newname)
10 unlink(const char __user * pathname)
11 execve(const char __user * filename, const char __user *const __user * argv, const char __user *const __user * envp)
12 chdir(const char __user * filename)
13 time(time_t __user * tloc)
14 mknod(const char __user * filename, umode_t mode, unsigned dev)
15 chmod(const char __user * filename, umode_t mode)
16 lchown(const char __user * filename, old_uid_t user, old_gid_t group)
18 oldstat(const char __user * filename, struct __old_kernel_stat __user * statbuf)
19 lseek(unsigned int fd, off_t offset, unsigned int whence)
20 getpid()
21 mount(char __user * dev_name, char __user * dir_name, char __user * type, unsigned long flags, void __user * data)
22 umount(char __user * name)
23 setuid(old_uid_t uid)
24 getuid()
25 stime(time_t __user * tptr)
26 ptrace(long request, long pid, unsigned long addr, unsigned long data)
27 alarm(unsigned int seconds)
28 oldfstat(unsigned int fd, struct __old_kernel_stat __user * statbuf)
29 pause()
30 utime(char __user * filename, struct utimbuf __user * times)
33 access(const char __user * filename, int mode)
34 nice(int increment)
36 sync()
37 kill(pid_t pid, int sig)
38 rename(const char __user * oldname, const char __user * newname)
39 mkdir(const char __user * pathname, umode_t mode)
40 rmdir(const char __user * pathname)
41 dup(unsigned int fildes)
42 pipe(int __user * fildes)
43 times(struct tms __user * tbuf)
45 brk(unsigned long brk)
46 setgid(old_gid_t gid)
47 getgid()
48 signal(int sig, __sighandler_t handler)
49 geteuid()
50 getegid()
51 acct(const char __user * name)
52 umount2(char __user * name, int flags)
54 ioctl(unsigned int fd, unsigned int cmd, unsigned long arg)
55 fcntl(unsigned int fd, unsigned int cmd, unsigned long arg)
57 setpgid(pid_t pid, pid_t pgid)
60 umask(int mask)
61 chroot(const char __user * filename)
62 ustat(unsigned dev, struct ustat __user * ubuf)
63 dup2(unsigned int oldfd, unsigned int newfd)
64 getppid()
65 getpgrp()
66 setsid()
67 sigaction(int sig, const struct old_sigaction __user * act, struct old_sigaction __user * oact)
68 sgetmask()
69 ssetmask(int newmask)
70 setreuid(old_uid_t ruid, old_uid_t euid)
71 setregid(old_gid_t rgid, old_gid_t egid)
72 sigsuspend(int unused1, int unused2, old_sigset_t mask)
73 sigpending(old_sigset_t __user * set)
74 sethostname(char __user * name, int len)
75 setrlimit(unsigned int resource, struct rlimit __user * rlim)
76 getrlimit(unsigned int resource, struct rlimit __user * rlim)
77 getrusage(int who, struct rusage __user * ru)
78 gettimeofday(struct timeval __user * tv, struct timezone __user * tz)
79 settimeofday(struct timeval __user * tv, struct timezone __user * tz)
80 getgroups(int gidsetsize, old_gid_t __user * grouplist)
81 setgroups(int gidsetsize, old_gid_t __user * grouplist)
83 symlink(const char __user * oldname, const char __user * newname)
84 oldlstat(const char __user * filename, struct __old_kernel_stat __user * statbuf)
85 readlink(const char __user * path, char __user * buf, int bufsiz)
86 uselib(const char __user * library)
87 swapon(const char __user * specialfile, int swap_flags)
88 reboot(int magic1, int magic2, unsigned int cmd, void __user * arg)
89 readdir(unsigned int fd, struct old_linux_dirent __user * dirent, unsigned int count)
90 mmap(struct mmap_arg_struct __user * arg)
91 munmap(unsigned long addr, size_t len)
92 truncate(const char __user * path, long length)
93 ftruncate(unsigned int fd, unsigned long length)
94 fchmod(unsigned int fd, umode_t mode)
95 fchown(unsigned int fd, old_uid_t user, old_gid_t group)
96 getpriority(int which, int who)
97 setpriority(int which, int who, int niceval)
99 statfs(const char __user * pathname, struct statfs __user * buf)
100 fstatfs(unsigned int fd, struct statfs __user * buf)
102 socketcall(int call, unsigned long __user * args)
103 syslog(int type, char __user * buf, int len)
104 setitimer(int which, struct itimerval __user * value, struct itimerval __user * ovalue)
105 getitimer(int which, struct itimerval __user * value)
106 stat(const char __user * filename, struct stat __user * statbuf)
107 lstat(const char __user * filename, struct stat __user * statbuf)
108 fstat(unsigned int fd, struct stat __user * statbuf)
109 olduname(struct oldold_utsname __user * name)
111 vhangup()
114 wait4(pid_t upid, int __user * stat_addr, int options, struct rusage __user * ru)
115 swapoff(const char __user * specialfile)
116 sysinfo(struct sysinfo __user * info)
117 ipc(unsigned int call, int first, unsigned long second, unsigned long third, void __user * ptr, long fifth)
118 fsync(unsigned int fd)
119 sigreturn
120 clone(unsigned long clone_flags, unsigned long newsp, int __user * parent_tidptr, int __user * child_tidptr, unsigned long tls)
121 setdomainname(char __user * name, int len)
122 uname(struct old_utsname __user * name)
123 cacheflush
124 adjtimex(struct timex __user * txc_p)
125 mprotect(unsigned long start, size_t len, unsigned long prot)
126 sigprocmask(int how, old_sigset_t __user * nset, old_sigset_t __user * oset)
128 init_module(void __user * umod, unsigned long len, const char __user * uargs)
129 delete_module(const char __user * name_user, unsigned int flags)
131 quotactl(unsigned int cmd, const char __user * special, qid_t id, void __user * addr)
132 getpgid(pid_t pid)
133 fchdir(unsigned int fd)
134 bdflush(int func, long data)
135 sysfs(int option, unsigned long arg1, unsigned long arg2)
136 personality(unsigned int personality)
138 setfsuid(old_uid_t uid)
139 setfsgid(old_gid_t gid)
140 _llseek(unsigned int fd, unsigned long offset_high, unsigned long offset_low, loff_t __user * result, unsigned int whence)
141 getdents(unsigned int fd, struct linux_dirent __user * dirent, unsigned int count)
142 _newselect(int n, fd_set __user * inp, fd_set __user * outp, fd_set __user * exp, struct timeval __user * tvp)
143 flock(unsigned int fd, unsigned int cmd)
144 msync(unsigned long start, size_t len, int flags)
145 readv(unsigned long fd, const struct iovec __user * vec, unsigned long vlen)
146 writev(unsigned long fd, const struct iovec __user * vec, unsigned long vlen)
147 getsid(pid_t pid)
148 fdatasync(unsigned int fd)
149 _sysctl(struct __sysctl_args __user * args)
150 mlock(unsigned long start, size_t len)
151 munlock(unsigned long start, size_t len)
152 mlockall(int flags)
153 munlockall()
154 sched_setparam(pid_t pid, struct sched_param __user * param)
155 sched_getparam(pid_t pid, struct sched_param __user * param)
156 sched_setscheduler(pid_t pid, int policy, struct sched_param __user * param)
157 sched_getscheduler(pid_t pid)
158 sched_yield()
159 sched_get_priority_max(int policy)
160 sched_get_priority_min(int policy)
161 sched_rr_get_interval(pid_t pid, struct timespec __user * interval)
162 nanosleep(struct timespec __user * rqtp, struct timespec __user * rmtp)
163 mremap(unsigned long addr, unsigned long old_len, unsigned long new_len, unsigned long flags, unsigned long new_addr)
164 setresuid(old_uid_t ruid, old_uid_t euid, old_uid_t suid)
165 getresuid(old_uid_t __user * ruidp, old_uid_t __user * euidp, old_uid_t __user * suidp)
168 poll(struct pollfd __user * ufds, unsigned int nfds, int timeout_msecs)
169 nfsservctl
170 setresgid(old_gid_t rgid, old_gid_t egid, old_gid_t sgid)
171 getresgid(old_gid_t __user * rgidp, old_gid_t __user * egidp, old_gid_t __user * sgidp)
172 prctl(int option, unsigned long arg2, unsigned long arg3, unsigned long arg4, unsigned long arg5)
173 rt_sigreturn
174 rt_sigaction(int sig, const struct sigaction __user * act, struct sigaction __user * oact, size_t sigsetsize)
175 rt_sigprocmask(int how, sigset_t __user * nset, sigset_t __user * oset, size_t sigsetsize)
176 rt_sigpending(sigset_t __user * uset, size_t sigsetsize)
177 rt_sigtimedwait(const sigset_t __user * uthese, siginfo_t __user * uinfo, const struct timespec __user * uts, size_t sigsetsize)
178 rt_sigqueueinfo(pid_t pid, int sig, siginfo_t __user * uinfo)
179 rt_sigsuspend(sigset_t __user * unewset, size_t sigsetsize)
180 pread64(unsigned int fd, char __user * buf, size_t count, loff_t pos)
181 pwrite64(unsigned int fd, const char __user * buf, size_t count, loff_t pos)
182 chown(const char __user * filename, old_uid_t user, old_gid_t group)
183 getcwd(char __user * buf, unsigned long size)
184 capget(cap_user_header_t header, cap_user_data_t dataptr)
185 capset(cap_user_header_t header, const cap_user_data_t data)
186 sigaltstack(const stack_t __user * uss, stack_t __user * uoss)
187 sendfile(int out_fd, int in_fd, off_t __user * offset, size_t count)
190 vfork()
191 ugetrlimit
192 mmap2(unsigned long addr, unsigned long len, unsigned long prot, unsigned long flags, unsigned long fd, unsigned long pgoff)
193 truncate64(const char __user * path, loff_t length)
194 ftruncate64(unsigned int fd, loff_t length)
195 stat64(const char __user * filename, struct stat64 __user * statbuf)
196 lstat64(const char __user * filename, struct stat64 __user * statbuf)
197 fstat64(unsigned long fd, struct stat64 __user * statbuf)
198 lchown32(const char __user * filename, uid_t user, gid_t group)
199 getuid32()
200 getgid32()
201 geteuid32()
202 getegid32()
203 setreuid32(uid_t ruid, uid_t euid)
204 setregid32(gid_t rgid, gid_t egid)
205 getgroups32(int gidsetsize, gid_t __user * grouplist)
206 setgroups32(int gidsetsize, gid_t __user * grouplist)
207 fchown32(unsigned int fd, uid_t user, gid_t group)
208 setresuid32(uid_t ruid, uid_t euid, uid_t suid)
209 getresuid32(uid_t __user * ruidp, uid_t __user * euidp, uid_t __user * suidp)
210 setresgid32(gid_t rgid, gid_t egid, gid_t sgid)
211 getresgid32(gid_t __user * rgidp, gid_t __user * egidp, gid_t __user * sgidp)
212 chown32(const char __user * filename, uid_t user, gid_t group)
213 setuid32(uid_t uid)
214 setgid32(gid_t gid)
215 setfsuid32(uid_t uid)
216 setfsgid32(gid_t gid)
217 pivot_root(const char __user * new_root, const char __user * put_old)
218 mincore(unsigned long start, size_t len, unsigned char __user * vec)
219 madvise(unsigned long start, size_t len_in, int behavior)
220 getdents64(unsigned int fd, struct linux_dirent64 __user * dirent, unsigned int count)
221 fcntl64(unsigned int fd, unsigned int cmd, unsigned long arg)
224 gettid()
225 readahead(int fd, loff_t offset, size_t count)
226 setxattr(const char __user * pathname, const char __user * name, const void __user * value, size_t size, int flags)
227 lsetxattr(const char __user * pathname, const char __user * name, const void __user * value, size_t size, int flags)
228 fsetxattr(int fd, const char __user * name, const void __user * value, size_t size, int flags)
229 getxattr(const char __user * pathname, const char __user * name, void __user * value, size_t size)
230 lgetxattr(const char __user * pathname, const char __user * name, void __user * value, size_t size)
231 fgetxattr(int fd, const char __user * name, void __user * value, size_t size)
232 listxattr(const char __user * pathname, char __user * list, size_t size)
233 llistxattr(const char __user * pathname, char __user * list, size_t size)
234 flistxattr(int fd, char __user * list, size_t size)
235 removexattr(const char __user * pathname, const char __user * name)
236 lremovexattr(const char __user * pathname, const char __user * name)
237 fremovexattr(int fd, const char __user * name)
238 tkill(pid_t pid, int sig)
239 sendfile64(int out_fd, int in_fd, loff_t __user * offset, size_t count)
240 futex(u32 __user * uaddr, int op, u32 val, struct timespec __user * utime, u32 __user * uaddr2, u32 val3)
241 sched_setaffinity(pid_t pid, unsigned int len, unsigned long __user * user_mask_ptr)
242 sched_getaffinity(pid_t pid, unsigned int len, unsigned long __user * user_mask_ptr)
245 io_setup(unsigned nr_events, aio_context_t __user * ctxp)
246 io_destroy(aio_context_t ctx)
247 io_getevents(aio_context_t ctx_id, long min_nr, long nr, struct io_event __user * events, struct timespec __user * timeout)
248 io_submit(aio_context_t ctx_id, long nr, struct iocb __user * __user * iocbpp)
249 io_cancel(aio_context_t ctx_id, struct iocb __user * iocb, struct io_event __user * result)
250 fadvise64(int fd, loff_t offset, size_t len, int advice)
252 exit_group(int error_code)
253 lookup_dcookie(u64 cookie64, char __user * buf, size_t len)
254 epoll_create(int size)
255 epoll_ctl(int epfd, int op, int fd, struct epoll_event __user * event)
256 epoll_wait(int epfd, struct epoll_event __user * events, int maxevents, int timeout)
257 remap_file_pages(unsigned long start, unsigned long size, unsigned long prot, unsigned long pgoff, unsigned long flags)
258 set_tid_address(int __user * tidptr)
259 timer_create(const clockid_t which_clock, struct sigevent __user * timer_event_spec, timer_t __user * created_timer_id)
268 statfs64(const char __user * pathname, size_t sz, struct statfs64 __user * buf)
269 fstatfs64(unsigned int fd, size_t sz, struct statfs64 __user * buf)
270 tgkill(pid_t tgid, pid_t pid, int sig)
271 utimes(char __user * filename, struct timeval __user * utimes)
272 fadvise64_64(int fd, loff_t offset, loff_t len, int advice)
274 mbind(unsigned long start, unsigned long len, unsigned long mode, const unsigned long __user * nmask, unsigned long maxnode, unsigned flags)
275 get_mempolicy(int __user * policy, unsigned long __user * nmask, unsigned long maxnode, unsigned long addr, unsigned long flags)
276 set_mempolicy(int mode, const unsigned long __user * nmask, unsigned long maxnode)
277 mq_open(const char __user * u_name, int oflag, umode_t mode, struct mq_attr __user * u_attr)
283 kexec_load(unsigned long entry, unsigned long nr_segments, struct kexec_segment __user * segments, unsigned long flags)
284 waitid(int which, pid_t upid, struct siginfo __user * infop, int options, struct rusage __user * ru)
285 add_key(const char __user * _type, const char __user * _description, const void __user * _payload, size_t plen, key_serial_t ringid)
286 request_key(const char __user * _type, const char __user * _description, const char __user * _callout_info, key_serial_t destringid)
287 keyctl(int option, unsigned long arg2, unsigned long arg3, unsigned long arg4, unsigned long arg5)
288 ioprio_set(int which, int who, int ioprio)
289 ioprio_get(int which, int who)
290 inotify_init()
291 inotify_add_watch(int fd, const char __user * pathname, u32 mask)
292 inotify_rm_watch(int fd, __s32 wd)
294 migrate_pages(pid_t pid, unsigned long maxnode, const unsigned long __user * old_nodes, const unsigned long __user * new_nodes)
295 openat(int dfd, const char __user * filename, int flags, umode_t mode)
296 mkdirat(int dfd, const char __user * pathname, umode_t mode)
297 mknodat(int dfd, const char __user * filename, umode_t mode, unsigned dev)
298 fchownat(int dfd, const char __user * filename, uid_t user, gid_t group, int flag)
299 futimesat(int dfd, const char __user * filename, struct timeval __user * utimes)
300 fstatat64(int dfd, const char __user * filename, struct stat64 __user * statbuf, int flag)
301 unlinkat(int dfd, const char __user * pathname, int flag)
302 renameat(int olddfd, const char __user * oldname, int newdfd, const char __user * newname)
303 linkat(int olddfd, const char __user * oldname, int newdfd, const char __user * newname, int flags)
304 symlinkat(const char __user * oldname, int newdfd, const char __user * newname)
305 readlinkat(int dfd, const char __user * pathname, char __user * buf, int bufsiz)
306 fchmodat(int dfd, const char __user * filename, umode_t mode)
307 faccessat(int dfd, const char __user * filename, int mode)
308 pselect6(int n, fd_set __user * inp, fd_set __user * outp, fd_set __user * exp, struct timespec __user * tsp, void __user * sig)
309 ppoll(struct pollfd __user * ufds, unsigned int nfds, struct timespec __user * tsp, const sigset_t __user * sigmask, size_t sigsetsize)
310 unshare(unsigned long unshare_flags)
311 set_robust_list(struct robust_list_head __user * head, size_t len)
312 get_robust_list(int pid, struct robust_list_head __user * __user * head_ptr, size_t __user * len_ptr)
313 splice(int fd_in, loff_t __user * off_in, int fd_out, loff_t __user * off_out, size_t len, unsigned int flags)
314 sync_file_range(int fd, loff_t offset, loff_t nbytes, unsigned int flags)
315 tee(int fdin, int fdout, size_t len, unsigned int flags)
316 vmsplice(int fd, const struct iovec __user * iov, unsigned long nr_segs, unsigned int flags)
317 move_pages(pid_t pid, unsigned long nr_pages, const void __user * __user * pages, const int __user * nodes, int __user * status, int flags)
318 getcpu(unsigned __user * cpup, unsigned __user * nodep, struct getcpu_cache __user * unused)
319 epoll_pwait(int epfd, struct epoll_event __user * events, int maxevents, int timeout, const sigset_t __user * sigmask, size_t sigsetsize)
320 utimensat(int dfd, const char __user * filename, struct timespec __user * utimes, int flags)
321 signalfd(int ufd, sigset_t __user * user_mask, size_t sizemask)
322 timerfd_create(int clockid, int flags)
323 eventfd(unsigned int count)
324 fallocate(int fd, int mode, loff_t offset, loff_t len)
325 timerfd_settime(int ufd, int flags, const struct itimerspec __user * utmr, struct itimerspec __user * otmr)
326 timerfd_gettime(int ufd, struct itimerspec __user * otmr)
327 signalfd4(int ufd, sigset_t __user * user_mask, size_t sizemask, int flags)
328 eventfd2(unsigned int count, int flags)
329 epoll_create1(int flags)
330 dup3(unsigned int oldfd, unsigned int newfd, int flags)
331 pipe2(int __user * fildes, int flags)
332 inotify_init1(int flags)
333 preadv(unsigned long fd, const struct iovec __user * vec, unsigned long vlen, unsigned long pos_l, unsigned long pos_h)
334 pwritev(unsigned long fd, const struct iovec __user * vec, unsigned long vlen, unsigned long pos_l, unsigned long pos_h)
335 rt_tgsigqueueinfo(pid_t tgid, pid_t pid, int sig, siginfo_t __user * uinfo)
336 perf_event_open(struct perf_event_attr __user * attr_uptr, pid_t pid, int cpu, int group_fd, unsigned long flags)
337 fanotify_init(unsigned int flags, unsigned int event_f_flags)
338 fanotify_mark(int fanotify_fd, unsigned int flags, __u64 mask, int dfd, const char  __user * pathname)
339 prlimit64(pid_t pid, unsigned int resource, const struct rlimit64 __user * new_rlim, struct rlimit64 __user * old_rlim)
340 socket(int family, int type, int protocol)
341 bind(int fd, struct sockaddr __user * umyaddr, int addrlen)
342 connect(int fd, struct sockaddr __user * uservaddr, int addrlen)
343 listen(int fd, int backlog)
344 accept(int fd, struct sockaddr __user * upeer_sockaddr, int __user * upeer_addrlen)
345 getsockname(int fd, struct sockaddr __user * usockaddr, int __user * usockaddr_len)
346 getpeername(int fd, struct sockaddr __user * usockaddr, int __user * usockaddr_len)
347 socketpair(int family, int type, int protocol, int __user * usockvec)
348 send(int fd, void __user * buff, size_t len, unsigned int flags)
349 sendto(int fd, void __user * buff, size_t len, unsigned int flags, struct sockaddr __user * addr, int addr_len)
350 recv(int fd, void __user * ubuf, size_t size, unsigned int flags)
351 recvfrom(int fd, void __user * ubuf, size_t size, unsigned int flags, struct sockaddr __user * addr, int __user * addr_len)
352 shutdown(int fd, int how)
353 setsockopt(int fd, int level, int optname, char __user * optval, int optlen)
354 getsockopt(int fd, int level, int optname, char __user * optval, int __user * optlen)
355 sendmsg(int fd, struct user_msghdr __user * msg, unsigned int flags)
356 recvmsg(int fd, struct user_msghdr __user * msg, unsigned int flags)
357 recvmmsg(int fd, struct mmsghdr __user * mmsg, unsigned int vlen, unsigned int flags, struct timespec __user * timeout)
358 accept4(int fd, struct sockaddr __user * upeer_sockaddr, int __user * upeer_addrlen, int flags)
359 name_to_handle_at(int dfd, const char __user * name, struct file_handle __user * handle, int __user * mnt_id, int flag)
360 open_by_handle_at(int mountdirfd, struct file_handle __user * handle, int flags)
361 clock_adjtime(const clockid_t which_clock, struct timex __user * utx)
362 syncfs(int fd)
363 sendmmsg(int fd, struct mmsghdr __user * mmsg, unsigned int vlen, unsigned int flags)
364 setns(int fd, int nstype)
365 process_vm_readv(pid_t pid, const struct iovec __user * lvec, unsigned long liovcnt, const struct iovec __user * rvec, unsigned long riovcnt, unsigned long flags)
366 process_vm_writev(pid_t pid, const struct iovec __user * lvec, unsigned long liovcnt, const struct iovec __user * rvec, unsigned long riovcnt, unsigned long flags)
367 kcmp(pid_t pid1, pid_t pid2, int type, unsigned long idx1, unsigned long idx2)
368 finit_module(int fd, const char __user * uargs, int flags)
